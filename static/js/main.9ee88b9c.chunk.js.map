{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","getMovie","query","fetch","then","res","json","catch","Response","Error","FindMovie","addMovie","useState","setQuery","setMovie","isLoaded","setIsLoaded","isError","setIsError","queryLength","trim","length","handleClickFind","a","data","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","value","onChange","target","handleSearchChange","classNames","finally","disabled","onClick","event","preventDefault","arrayMovies","some","isMovieDuplicate","App","setMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ee88b9c.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=106f220e';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { getMovie } from '../../api';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\nimport './FindMovie.scss';\n\ntype Props = {\n  addMovie: (movie: Movie | null) => void;\n  movies: Movie[];\n};\n\nfunction isMovieDuplicate(arrayMovies: Movie[], movie: Movie): boolean {\n  return arrayMovies.some(({ imdbId }) => imdbId === movie.imdbId);\n}\n\nexport const FindMovie: React.FC<Props> = ({\n  addMovie,\n  movies,\n}) => {\n  const [query, setQuery] = useState<string>('');\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoaded, setIsLoaded] = useState<boolean>(true);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const queryLength = query.trim().length;\n\n  const handleSearchChange = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLInputElement>) => (\n    setQuery(value)\n  );\n\n  const handleClickFind = async () => {\n    const data = await getMovie(query);\n\n    if ('Error' in data) {\n      setIsLoaded(true);\n      setIsError(true);\n\n      return;\n    }\n\n    setMovie({\n      title: data.Title,\n      description: data.Plot,\n      imgUrl: data.Poster,\n      imdbUrl: `https://www.imdb.com/title/${data.imdbID}`,\n      imdbId: data.imdbID,\n    });\n\n    setIsLoaded(true);\n    setIsError(false);\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={value => {\n                handleSearchChange(value);\n                setIsError(false);\n              }}\n            />\n          </div>\n\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames(\n                'button',\n                'is-light',\n                { 'is-loading': !isLoaded },\n                { finally: isLoaded },\n              )}\n              disabled={queryLength === 0}\n              onClick={(event) => {\n                event.preventDefault();\n\n                setIsLoaded(false);\n\n                if (!query) {\n                  setIsLoaded(true);\n\n                  return;\n                }\n\n                handleClickFind();\n              }}\n            >\n              {movie ? 'Search again' : 'Find a movie'}\n            </button>\n          </div>\n\n          {(movie && !isError) && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={() => {\n                  if (!isMovieDuplicate(movies, movie)) {\n                    addMovie(movie);\n                  }\n\n                  setMovie(null);\n                  setQuery('');\n                }}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          {movie && (\n            <MovieCard movie={movie} />\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovie = (movie: Movie | null) => {\n    if (!movie) {\n      return;\n    }\n\n    setMovies([...movies, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          addMovie={addMovie}\n          movies={movies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}